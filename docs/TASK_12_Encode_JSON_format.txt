"task": {
	// optional
	"label": "my label",

	// mandatory
	"type": "Encode",

	"parameters": {
		// mandatory
		"references": [
			// mandatory. One or more References to identify the videos to be encoded
			// In case this task is placed inside an onSuccess event, the Reference... item can be omitted.
			// In such a case, the System will automatically add the Reference... item using the key
			// of the video that is supposed has to be encoded.
			// As reference can be used "mediaItemKey" or "uniqueName"

			// The below object could contain optionally:
			// - encodingProfileKey or encodingProfileLabel to specify
			//		a specific profile
			// - stopIfReferenceProcessingError in case of multiple References,
			//		this boolean field specifies if the MMS has to continue or not
			//		in case of an error during the processing. Default is false
			// - mediaItemTitle, optional

			{ "mediaItemKey": 11 }
		],

		// optional. Possible values: Low, Medium, High
		// If not present or if it is specifying a priority bigger than the allowed for this Workspace,
		//   the MaxEncodingPriority of the Workspace will be used.
		"encodingPriority": "Low",

		// optional. To be set with the EncodersPool label only in case a specific 
		// encoders pool has to be used
		"encodersPool": "",

		// mandatory: just one, EncodingProfilesSetKey, EncodingProfilesSetLabel,
		//    EncodingProfileKey or EncodingProfileLabel has to be present.
		//      EncodingProfilesSetLabel or EncodingProfilesSetKey will refer a set of profiles, 
		//            so several encodings will be generated.
		//      EncodingProfileLabel or EncodingProfileKey will represent just one profile
		"EncodingProfilesSetLabel": "Sport",
		"EncodingProfilesSetKey": 1,
		"encodingProfileKey": 1,
		"encodingProfileLabel": "Profile Logo",

		// Optional: in case the source contents has more than one video track, this parameter
		//	specifies the video track index to be used for the encoding (first track has index 0)
		"VideoTrackIndex": -1

		// Optional: in case the source contents has more than one audio track, this parameter
		//	specifies the audio track index to be used for the encoding (first track has index 0)
		"AudioTrackIndex": -1

		// optional
		"filters": {
			"video": [
				{
					"type": "blackdetect",
					"black_min_duration": 2.0,
					"pixel_black_th": 0.0
				},
				{
					"type": "blackframe",
					"amount": 98,
					"threshold": 32
				},
				{
					"type": "freezedetect",
					"noiseInDb": -60,
					"duration": 2
				},
				{
					// mandatory
					"type": "crop",
					// optional.
					// in_h e in_w are the input width and height
					// The width of the output video.
					// It defaults to in_w
					"out_w": "in_w",
					// optional
					// The height of the output video.
					// It defaults to in_h
					"out_h": "in_h",
					// optional
					// x,y 0,0 specifies the pint below on the left of the video
					// The horizontal position, in the input video, of the left edge of the output video.
					// It defaults to (in_w-out_w)/2
					"x": "100",
					// optional
					// The vertical position, in the input video, of the top edge of the output video.
					// It defaults to (in_h-out_h)/2
					"y": "100",
					// optional
					// If set to true will force the output display aspect ratio to be the same of the input,
					// by changing the output sample aspect ratio. It defaults to false.
					"keep_aspect": false,
					// optional
					// Enable exact cropping. If enabled, subsampled videos will be cropped at exact
					// width/height/x/y as specified and will not be rounded to nearest smaller value.
					// It defaults to false.
					"exact": false
				},
				{
					// mandatory
					"type": "drawbox",
					// optional
					// The expressions which specify the top left corner coordinates of the box.
					// It defaults to 0
					// x,y 0,0 specifies the pint below on the left of the video
					"x": "0",
					// optional
					// The expressions which specify the top left corner coordinates of the box.
					// It defaults to 0
					"y": "0",
					// optional
					// The expressions which specify the width of the box; if 0 they are interpreted
					// as the input width (in_w). It defaults to 0.
					"width": "300",
					// optional
					// The expressions which specify the height of the box; if 0 they are interpreted
					// as the input height (in_h). It defaults to 0.
					"height": "300",
					// optional. Possible values: ...to be added
					"fontColor": "red",
					// optional
					"percentageOpacity": 20,
					// optional
					// The expression which sets the thickness of the box edge. A value of fill
					// will create a filled box. Default value is 3
					"thickness": "fill"
				},
				{
					// mandatory
					"type": "drawtext",
					// mandatory
					//	The text string to be drawn
					"text": "...",
					// optional: the below parameters specify the X and Y in pixel
					//	  where the text
					//    has to be overlayed on the video. Default values for both are "0"
					//    It is possible to specify also a formula
					//	  using the following variables:
					//        video_width: width in pixel of the video
					//        video_height: height in pixel of the video
					//        text_width: width in pixel of the text
					//			(a text may have more than one line)
					//        text_height: height in pixel of the text
					//			(a text may have more than one line)
					//        line_width: width in pixel of the line
					//        line_height: height in pixel of the line
					//        timestampInSeconds: it can be used to change the position of the text based on
					//              timestamp of the frame
					// Examples:
					//    To show the text at the pixel: 100:50:
					//          "TextPosition_X_InPixel"="100"
					//          "TextPosition_Y_InPixel"="50"
					//    To show the text at the center of the video frame:
					//          "TextPosition_X_InPixel"="(video_width-text_width)/2"
					//          "TextPosition_Y_InPixel"="(video_height-text_height)/2"
					//    To show a text line sliding from right to left in the last row of the video frame. The "Text" is assumed to contain a single line with no newlines:
					//          "TextPosition_X_InPixel"="-50*timestampInSeconds"
					//          "TextPosition_Y_InPixel"="video_height-line_height"
					"textPosition_X_InPixel": "(video_width-text_width)/2",                                  
					"textPosition_Y_InPixel": "(video_height-text_height)/2",                                
					// optional. Possible values: ...to be added
					"fontType": "",
					// optional. The font size to be used for drawing text
					"fontSize": 24,
					// optional. The color to be used for drawing fonts
					"fontColor": "yellow",
					// optional
					"textPercentageOpacity": 20,
					// optional, default is 0
					"shadowX": 0,
					"shadowY": 0,
					// optional. Used to draw a box around text
					"boxEnable": true,
					// optional. The color to be used for drawing box around text
					"boxColor": "red",
					// optional
					"boxPercentageOpacity": 20,
					// optional
					"boxBorderW": 0
				}
			],
			"audio": [
				{
					"type": "silencedetect",
					"noise": 0.0001
				},
				{
					"type": "volume",
					//	- 0.5: If we want our volume to be half of the input volume
					//	- 1.5: 150% of current volume
					//	- 10dB: increase the volume by 10dB
					//	- -5dB: reduce the volume by 5dB
					"factor": 5.0
				}
			],
			"complex": [
				{
					"type": "blackframe",
					"amount": 98,
					"threshold": 32
				},
				{
					"type": "blend",
					"mode": "difference",
					"shortest": 1
				},
				{
					// overlay image on video
					"type": "overlay",
					// the below parameters specify the X and Y in pixel where the image has to be overlayed on the video
					// Default for both parameters is "0"
					//    It is possible to specify also a formula using the following variables:
					//        video_width: width in pixel of the video
					//        video_height: height in pixel of the video
					//        image_width: width in pixel of the image
					//        image_height: height in pixel of the image
					"imagePosition_X_InPixel": "video_width-image_width-10",
					"imagePosition_Y_InPixel": "video_height-image_height-10"
				}
			]
		},

		// optional: If present, it specifies when the Task has to be executed. The processing of the task
		//		can be delayed respect to the specified date based on his dependencies with other tasks.
		//		The date format is:
		//       - Zulu/UTC Date-time having the following format: YYYY-MM-DDTHH:MI:SSZ
		//	If it is not present, by default it will be initialized with the ingesion time
		"processingStartingFrom": "2019-01-21T12:30:00Z",

		// optional: It is used in case this Task has to wait a Task of another Workflow
		"waitFor": [
			{
				"globalIngestionLabel": "XXXX"
			}
		]
	}
}
