"Task": {
	// optional
	"Label"="My Live Proxy",

	// mandatory
	"Type": "Live-Proxy",

	"Parameters": {

		// mandatory, it identifies the channel
		"ConfigurationLabel": "",

		// optional. To be set with the EncodersPool label only in case 
		// a specific encoders pool has to be used
		// In case this field is initialized here, it overrides the one specified by the channel
		// configuration label
		"EncodersPool": "",

		// optional, it specifies if the Proxy will have a specified running period
		//	Default is false
		"TimePeriod": false,

		// mandatory in case the 'TimePeriod' field is true: It specifies the proxy period, his format is:
		//       - Zulu/UTC Date-time having the following format: YYYY-MM-DDTHH:MI:SSZ
		"schedule": {
			"start": "2019-01-21T12:30:00Z",
			"end": "2019-01-21T13:30:00Z"
		},

		// optional: user agent used only in case actAsServer is false
		"UserAgent": "",

		// optional: If it is present, in case the live streaming provides several tracks,
		//	this parameter is used to select the track to be proxied having
		//	the biggest width smaller or equal than MaxWidth
		//	The audio track selected is the one related with the selected video track
		"MaxWidth": -1,

		// optional: It is possible to use this field to specify any other input options.
		// Examples:
		//	-itsoffset -2.0
		"OtherInputOptions": "",

		// optional. In case the URL fails, the LiveProxy task tries it again. This parameter indicates
		//		how many times LiveProxy has to try the URL.
		//		Remark: this parameter is used ONLY in case TimePeriod is false. If TimePeriod is true
		//			the tasks tries untile the TimePeriod->End is reached.
		//		Default: 3
		"MaxAttemptsNumberInCaseOfErrors": 3,

		// optional. In case the URL fails, the LiveProxy task tries it again. This parameter indicates
		//		how many seconds LiveProxy has to wait before to try again.
		//		Default: 600
		"WaitingSecondsBetweenAttemptsInCaseOfErrors": 600,

		// This json array lists all the Outputs the Live-Proxy task has to generate.
		//	At least one Output has to be present
		"Outputs" = [
			{
				// optional, possible values: HLS, DASH, RTMP_Stream, AWS_CHANNEL.
				// Default: HLS
				"OutputType": "HLS",

				// DeliveryCode is used only in case of HLS and DASH
				//	It identifies this specific delivery. In case for example
				//	- we have two HLS Outputs or
				//	- we have the same channel delivered
				//		as Recording monitor HLS and Live Proxy Output
				//	In these scenarios, delivery code identifies each delivery.
				//	Internally the delivery code is used to
				//		- build the delivery URL (so it is used to build
				//			the path where the HLS segments are saved)
				// mandatory only if OutputType is HLS or DASH.
				"DeliveryCode": 12345,

				// optional, used only in case of HLS, Default: 10
				"SegmentDurationInSeconds": 10,

				// optional, used only in case of HLS, Default: 6
				"PlaylistEntriesNumber": 6,

				// mandatory only in case of RTMP_Stream
				"RtmpUrl": "...",
				// optional only in case of RTMP_Stream
				"rtmpStreamName": "...",
				// optional only in case of RTMP_Stream
				"rtmpUserName": "...",
				// optional only in case of RTMP_Stream
				"rtmpPassword": "...",

				// optional only in case of RTMP_Stream. It specifies the url to be used
				//		to play the stream sent through the rtmp 
				"PlayUrl": "...",

				// optional, used only in case of AWS_CHANNEL
				// the configuration label of an AWS Channel defined in MMS.
				// If not present, a SHARED free AWS channel is used
				"awsChannelConfigurationLabel": "",

				// optional, used only in case of AWS_CHANNEL
				// it specifies if a signed URL has to be used
				// Default: false
				"awsSignedURL": false,

				// optional, used only in case of AWS_CHANNEL and awsSignedURL is true
				// it specifies the expiration of the signed URL
				// Default: 1440 (1 day)
				"expirationInMinutes": 1440,

				// optional: It is possible to use this field to specify any other output options.
				// Examples:
				//	-map 0:1: specify to take the stream 1 from the first input (0) to be used in the output
				//	-map 0:a:2: specify to take the stream audio 2 from the first input (0) to be used in the output
				//	-map 0:v: specify to take all video from the first input (0) to be used in the output
				"OtherOutputOptions": "-map 0:1",

				// optional
				"filters": {
					"video": [
						{
							"type": "fade",
							"duration": 4
						},
						{
							"type": "blackdetect",
							"black_min_duration": 2.0,
							"pixel_black_th": 0.0
						},
						{
							"type": "blackframe",
							"amount": 98,
							"threshold": 32
						},
						{
							"type": "freezedetect",
							"noiseInDb": -60,
							"duration": 2
						}
					],
					"audio": [
						{
							"type": "silencedetect",
							"noise": 0.0001
						},
						{
							"type": "volume",
							//	- 0.5: If we want our volume to be half of the input volume
							//	- 1.5: 150% of current volume
							//	- 10dB: increase the volume by 10dB
							//	- -5dB: reduce the volume by 5dB
							"factor": 5.0
						}
					],
					"complex": [
						{
							"type": "blackframe",
							"amount": 98,
							"threshold": 32
						},
						{
							"type": "blend",
							"mode": "difference",
							"shortest": 1
						}
					]
				}

				// optional: this parameter is needed only in case the streaming has to be encoded before proxying
				//    The encoding profile can be specified using EncodingProfileKey or EncodingProfileLabel.
				//		In case the EncodingProfileLabel is not unique in the system, ContentType has to be present too
				//		Possible values for the ContentType are: video, audio
				"EncodingProfileKey": 1,
				"EncodingProfileLabel": "Profile sport",
				"ContentType": "video"
			}
		],

		// optional: If present, it specifies when the Task has to be executed. The processing of the task
		//		can be delayed respect to the specified date based on his dependencies with other tasks.
		//		The date format is:
		//       - Zulu/UTC Date-time having the following format: YYYY-MM-DDTHH:MI:SSZ
		//	If it is not present, by default it will be initialized with the ingesion time
		"ProcessingStartingFrom": "2019-01-21T12:30:00Z"
	}
}

