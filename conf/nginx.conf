
user  mms;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        /var/catramms/pids/nginx.pid;


events {
	worker_connections  1024;
}


http {
	include       mime.types;
	default_type  application/octet-stream;

	# reserve 1MB under the name 'uploads' to track uploads
	upload_progress uploads 1m;

	#NGINX inizializza remote_addr con l'IP del Load Balancer.
	#Poichè passiamo dal LB, il vero remote IP è http_x_forwarded_for
	#Il prossimo setting dice a NGINX di sostituire l'IP del LB con http_x_forwarded_for
	#In questo modo nel rate limiting, possiamo usare binary_remote_addr
	#che occupa molto meno spazio
	set_real_ip_from	10.0.0.17; #IP address of test API Loadbalancer
	set_real_ip_from	10.0.0.18; #IP address of test BINARY Loadbalancer
	set_real_ip_from	10.0.0.19; #IP address of test GUI Loadbalancer
	set_real_ip_from	10.0.0.20; #IP address of test DELIVERY Loadbalancer
	set_real_ip_from	10.0.0.21; #IP address of test DELIVERY-PATH Loadbalancer
	set_real_ip_from	10.0.0.22; #IP address of test DELIVERY-F Loadbalancer
	set_real_ip_from	10.0.0.2; #IP address of prod DELIVERY-F Loadbalancer
	set_real_ip_from	10.0.0.4; #IP address of prod DELIVERY-PATH Loadbalancer
	set_real_ip_from	10.0.0.7; #IP address of prod BINARY Loadbalancer
	set_real_ip_from	10.0.0.9; #IP address of prod GUI Loadbalancer
	set_real_ip_from	10.0.0.10; #IP address of prod DELIVERY Loadbalancer
	set_real_ip_from	10.0.0.11; #IP address of prod API Loadbalancer
	set_real_ip_from	172.31.32.0/20; #IP addresses of AWS test e prod Loadbalancer
	set_real_ip_from	172.31.16.0/20; #IP addresses of AWS test e prod Loadbalancer
	set_real_ip_from	172.31.0.0/20; #IP addresses of AWS test e prod Loadbalancer
	real_ip_header		X-Forwarded-For;

	rewrite_log off;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
	log_format   main '$time_local - $server_name to $upstream_addr - $remote_addr - $remote_user - $status '
		'- "$request" - $body_bytes_sent - "$http_referer" '
		'- "$http_user_agent" - "$http_x_forwarded_for"';

	log_format   error '$time_local - $server_name to $upstream_addr - $remote_addr - $remote_user - $status '
		'- "$request" - $body_bytes_sent - "$http_referer" '
		'- "$http_user_agent" - "$http_x_forwarded_for"';

	access_log /var/catramms/logs/nginx/access.log main;
	error_log  /var/catramms/logs/nginx/error.log error;

	#https://www.nginx.com/blog/rate-limiting-nginx/
	#10m: shared memory zone 10 megabytes (about 16000 IP addresses takes 1 megabyte in case of binary ip)

	#scenario: cibortv, un canale impiega 1 min. per ripartire, circa 2000 apps continano a richiedere
	#quel canale, le richieste sono ditribuite dal load balancer. La GUI ha smesso di funzionare.
	#Sul singolo API server ho visto 8 richieste contemporane dallo stesso IP servite tutte con successo
	#Nota: parliamo dello stesso IP.
	limit_req_zone $binary_remote_addr zone=mmsAPILimit:10m rate=10r/s;

	#scenario: vedi sopra
	#Sul singolo GUI server ho visto 3 richieste contemporane dallo stesso IP tutte
	#che fallivano (/catramms/rest/api/checkChannelStatus)
	#Nota: parliamo dello stesso IP.
	limit_req_zone $binary_remote_addr zone=mmsGUILimit:10m rate=10r/s;

	#La conf. sotto indica 10 richieste al secondo, o 1 ogni 100 ms. Se arrivano 50 richieste
	#contemporaneamente, come nel caso del delivery delle 50 picture di mediaItems.xhtml,
	#NGINX inoltra una richiesta al server/proxy e mette le altre 49 in coda.
	#Nota: parliamo dello stesso IP.
	limit_req_zone $binary_remote_addr zone=mmsDeliveryLimit:10m rate=10r/s;
	limit_req_zone $binary_remote_addr zone=mmsBinaryLimit:10m rate=10r/s;
	limit_req_zone $binary_remote_addr zone=mmsEncoderLimit:10m rate=10r/s;

	server_names_hash_bucket_size 64;

	#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
	#                  '$status $body_bytes_sent "$http_referer" '
	#                  '"$http_user_agent" "$http_x_forwarded_for"';

	#access_log  logs/access.log  main;

	sendfile        on;
    #tcp_nopush     on;

	#keepalive_timeout  0;
	keepalive_timeout  65;

	#gzip  on;

	include /opt/catramms/nginx/conf/sites-enabled/*;

}
